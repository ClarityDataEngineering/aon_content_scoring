config {
    type: 'view',
    schema: project_config.OUTPUT_STAGING_DATASET, 
    description: 'Weekly GA4 new vs returning users per page with 12-month rolling total, months live, monthly average, and score. Uses enhanced scaffold for all page status logic.',
    bigquery: {
        labels: {
          table_name: "content_scoring_stg_metric_ga4_new_vs_returning_users"
        }
    }
}

-- Get base users weekly cadence
with base_users as (
    select
        date_trunc(event_date_dt, week(MONDAY)) as event_date_dt
        , landing_page_clean as page_location_clean
        , count(distinct(client_key)) as users
        , count(distinct(if(ga_session_number = 1, client_key, null))) as new_users
    from 
        ${ref('final_ga4_sessions')}
    where
        regexp_contains(landing_page_clean, r'${project_config.PAGES_TO_INCLUDE_RX}')
        and session_attribution.last_non_direct_default_channel_grouping = 'Referral'
        and event_date_dt >= "${project_config.START_DATE}"
    group by 
        event_date_dt
        , page_location_clean
)

-- Join with weekly scaffold - 
, users_live_pages as (
    select
        sc.event_date_dt
        , sc.page_location_clean
        , coalesce(bs.users, 0) as users
        , coalesce(bs.new_users, 0) new_users
        , sc.first_seen_date
        , sc.months_live
    from 
        ${ref('stg_ga4_page_live_weekly_scaffold')} sc
    left join 
        base_users bs
        using (event_date_dt, page_location_clean)
    where
        sc.is_page_live_week = true  -- Only include pages where the page is live in a given week
)

-- Calculate 12-month rolling sum
, rolling_12_month as (
    select
        event_date_dt
        , page_location_clean
        , first_seen_date
        , months_live
        , sum(users) over (
            partition by page_location_clean 
            order by event_date_dt 
            rows between 51 preceding and current row
        ) as total_users_12_months
        , sum(new_users) over (
            partition by page_location_clean 
            order by event_date_dt 
            rows between 51 preceding and current row
        ) as total_new_users_12_months
    from 
        users_live_pages
)
-- Join the months live and calculate the monthly avg. Add filter to include rows only post first seen date
, calc_monthly_avg as (
    select
        event_date_dt
        , page_location_clean
        , total_users_12_months
        , total_new_users_12_months
        , months_live
        , first_seen_date
        -- If both metrics are 0 then return 0 rather than null
        , case
            when total_new_users_12_months = 0 and total_users_12_months = 0 then 0
            else round(safe_divide(total_new_users_12_months, total_users_12_months) * 100, 1)
        end as rolling_12_month_new_user_percent
    from 
        rolling_12_month
    where
        event_date_dt >= first_seen_date
)

-- Calculate the percentiles at a weekly cadence based on 12 month rolling avg  
, weekly_percentiles as (
    select
        event_date_dt
        , page_location_clean
        , total_users_12_months
        , total_new_users_12_months
        , months_live
        , first_seen_date
        , rolling_12_month_new_user_percent
        , cast(round(percentile_cont(rolling_12_month_new_user_percent, 0.95) over(partition by event_date_dt)) as int64) as percentile_95
        , cast(round(percentile_cont(rolling_12_month_new_user_percent, 0.85) over(partition by event_date_dt)) as int64) as percentile_85
        , cast(round(percentile_cont(rolling_12_month_new_user_percent, 0.70) over(partition by event_date_dt)) as int64) as percentile_70
        , cast(round(percentile_cont(rolling_12_month_new_user_percent, 0.50) over(partition by event_date_dt)) as int64) as percentile_50
    from 
        calc_monthly_avg
)

-- Add case for clicks percentile scoring logic
select
    event_date_dt
    , page_location_clean
    , total_users_12_months
    , total_new_users_12_months
    , months_live
    , first_seen_date
    , rolling_12_month_new_user_percent
    , percentile_95
    , percentile_85
    , percentile_70
    , percentile_50
    , case
        when rolling_12_month_new_user_percent = 0 then 1 
        when rolling_12_month_new_user_percent >= percentile_95 then 5
        when rolling_12_month_new_user_percent >= percentile_85 and rolling_12_month_new_user_percent < percentile_95 then 4
        when rolling_12_month_new_user_percent >= percentile_70 and rolling_12_month_new_user_percent < percentile_85 then 3
        when rolling_12_month_new_user_percent >= percentile_50 and rolling_12_month_new_user_percent < percentile_70 then 2
        when rolling_12_month_new_user_percent < percentile_50 then 1
    end as score_ga4_new_vs_returning_users
from 
    weekly_percentiles