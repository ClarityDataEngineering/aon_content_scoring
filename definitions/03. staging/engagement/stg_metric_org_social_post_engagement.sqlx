config {
    type: 'view',
    schema: project_config.OUTPUT_STAGING_DATASET, 
    description: 'Provides weekly organic social post engagements scores for each page, based on absolute total engagements from posts within their first 30 days of creation over a rolling 4-week window. Each pages total engagements is benchmarked against percentile thresholds, assigning a score from 1 (lowest) to 5 (highest).',
    bigquery: {
        labels: {
          table_name: "content_scoring_stg_metric_org_social_post_engagagement"
        }
    }
}

-- Note: The organic_social table already contains one row per date for each post, regardless of whether data exists. 

-- Get base engagements and calculate at weekly cadence 
 with base_engagements as (
    select
        date_trunc(date, week(MONDAY)) as event_date_dt
        , post_link.post_link_url as page_location_clean
        , sum(coalesce(clicks,0) + coalesce(comments, 0) + coalesce(likes, 0) + coalesce(shares, 0)) as engagements
    from 
        ${ref('social_posts')}
    where
        regexp_contains(post_link.post_link_url, r'${project_config.PAGES_TO_INCLUDE_RX}')
        and date >= "${project_config.START_DATE}"
        and date_diff(date, created_date, day) <= 30  -- Only include posts within 30 days of creation
    group by 
        event_date_dt
        , post_link.post_link_url
)


-- Join status with impressions and filter by HTTP status 
, post_engagements_with_status as (
    select
        sc.event_date_dt
        , sc.page_location_clean
        , coalesce(be.engagements, 0) as engagements
        , sc.first_seen_date
        , sc.months_live
        , sc.last_200_date
    from 
        ${ref('stg_ga4_page_live_weekly_scaffold')} sc
    left join 
        base_engagements be
        using (event_date_dt, page_location_clean)
    where
        sc.is_page_live_week = true 
) 

-- Use window function to calculate a 4 week rolling total looking back over last 4 rows (including current)
, rolling_4_weeks as (
    select
        event_date_dt
        , page_location_clean
        , first_seen_date
        , months_live
        , sum(engagements) over (partition by page_location_clean order by event_date_dt rows between 3 preceding and current row) as total_4_weeks_engagements
    from 
        post_engagements_with_status
)

-- Filter to include rows only post first seen date
, engagement_totals as (
    select
        event_date_dt
        , page_location_clean
        , total_4_weeks_engagements
        , months_live
        , first_seen_date
    from 
        rolling_4_weeks
    where
        event_date_dt >= first_seen_date
)

-- Calculate the percentiles at a weekly cadence based on absolute 4 week totals  
, weekly_percentiles as (
    select
        event_date_dt
        , page_location_clean
        , total_4_weeks_engagements
        , months_live
        , first_seen_date
        -- Ignore pages with 0
        , cast(round(percentile_cont(case when total_4_weeks_engagements > 0 then total_4_weeks_engagements end, 0.75) over(partition by event_date_dt)) as int64) as percentile_75
        , cast(round(percentile_cont(case when total_4_weeks_engagements > 0 then total_4_weeks_engagements end, 0.50) over(partition by event_date_dt)) as int64) as percentile_50
        , cast(round(percentile_cont(case when total_4_weeks_engagements > 0 then total_4_weeks_engagements end, 0.25) over(partition by event_date_dt)) as int64) as percentile_25
    from 
        engagement_totals
)

-- Add case for engagements percentile scoring logic
select
    event_date_dt
    , page_location_clean
    , total_4_weeks_engagements
    , months_live
    , first_seen_date
    , percentile_75
    , percentile_50
    , percentile_25
    , case 
        when total_4_weeks_engagements = 0 then 1
        when total_4_weeks_engagements >= percentile_75 then 5
        when total_4_weeks_engagements >= percentile_50 and total_4_weeks_engagements < percentile_75 then 4
        when total_4_weeks_engagements >= percentile_25 and total_4_weeks_engagements < percentile_50 then 3
        when total_4_weeks_engagements < percentile_25 then 2
    end as score_org_social_engagements_score
from 
    weekly_percentiles  