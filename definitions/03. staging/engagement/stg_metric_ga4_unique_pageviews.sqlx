config {
    type: 'view',
    schema: project_config.OUTPUT_STAGING_DATASET, 
    description: 'Weekly GA4 unique pageviews per page with 12-month rolling total, months live, monthly average, and traffic score. Uses enhanced scaffold for all page status logic.',
    bigquery: {
        labels: {
          table_name: "content_scoring_stg_metric_ga4_unique_pageviews"
        }
    }
}

-- Get base unique pageviews at weekly cadence
with base_unique_pv as (
    select
        date_trunc(event_date_dt, week(MONDAY)) as event_date_dt
        , page_location_clean
        , sum(unique_page_views) as unique_pageviews
    from 
        ${ref('final_ga4_pages')}
    where
        regexp_contains(page_location_clean, r'${project_config.PAGES_TO_INCLUDE_RX}')
        and event_date_dt >= "${project_config.START_DATE}"
    group by 
        event_date_dt
        , page_location_clean
)

-- Join with weekly scaffold - 
, unique_pv_live_pages as (
    select
        sc.event_date_dt
        , sc.page_location_clean
        , coalesce(bs.unique_pageviews, 0) as unique_pageviews
        , sc.first_seen_date
        , sc.months_live
    from 
        ${ref('stg_ga4_page_live_weekly_scaffold')} sc
    left join 
        base_unique_pv bs
        using (event_date_dt, page_location_clean)
    where
        sc.is_page_live_week = true  -- Only include pages where the page is live in a given week
)

-- Calculate 12-month rolling sum
, rolling_12_month as (
    select
        event_date_dt
        , page_location_clean
        , first_seen_date
        , months_live
        , sum(unique_pageviews) over (
            partition by page_location_clean 
            order by event_date_dt 
            rows between 51 preceding and current row
        ) as total_12_months
    from 
        unique_pv_live_pages
)
-- Join the months live and calculate the monthly avg. Add filter to include rows only post first seen date
, calc_monthly_avg as (
    select
        event_date_dt
        , page_location_clean
        , total_12_months
        , months_live
        , first_seen_date
        -- Divide by months live, though if months live is greater than 12 then return 12
        , cast(round(safe_divide(total_12_months, least(months_live, 12))) as int64) as monthly_avg
    from 
        rolling_12_month
    where
        event_date_dt >= first_seen_date
)

-- Calculate the percentiles at a weekly cadence based on 12 month rolling avg  
, weekly_percentiles as (
    select
        event_date_dt
        , page_location_clean
        , total_12_months
        , months_live
        , first_seen_date
        , monthly_avg
        , cast(round(percentile_cont(monthly_avg, 0.95) over(partition by event_date_dt)) as int64) as percentile_95
        , cast(round(percentile_cont(monthly_avg, 0.85) over(partition by event_date_dt)) as int64) as percentile_85
        , cast(round(percentile_cont(monthly_avg, 0.70) over(partition by event_date_dt)) as int64) as percentile_70
        , cast(round(percentile_cont(monthly_avg, 0.50) over(partition by event_date_dt)) as int64) as percentile_50
    from 
        calc_monthly_avg
)

-- Add case for clicks percentile scoring logic
select
    event_date_dt
    , page_location_clean
    , total_12_months
    , months_live
    , first_seen_date
    , monthly_avg
    , percentile_95
    , percentile_85
    , percentile_70
    , percentile_50
    , case 
        when monthly_avg >= percentile_95 then 5
        when monthly_avg >= percentile_85 and monthly_avg < percentile_95 then 4
        when monthly_avg >= percentile_70 and monthly_avg < percentile_85 then 3
        when monthly_avg >= percentile_50 and monthly_avg < percentile_70 then 2
        when monthly_avg < percentile_50 then 1
    end as score_ga4_unique_pageviews
from 
    weekly_percentiles